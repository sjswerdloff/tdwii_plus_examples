name: Build Executables

on:
  workflow_dispatch:  # Manual trigger

permissions:
  contents: write  # This allows creating releases and tags

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]  # , macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            asset-name: tdwii_plus_examples
            # platform-name: windows
            # path-sep: ";"

          # - os: macos-latest
          #   platform-name: macos
          #   asset-name: tdwii_plus_examples-macos
          #   path-sep: ":"

          # - os: ubuntu-latest
          #   platform-name: ubuntu
          #   asset-name: tdwii_plus_examples-ubuntu
          #   path-sep: ":"

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies with Poetry
      shell: bash
      run: |
        poetry install --with=dev

    - name: Build with PyInstaller (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        poetry run pyinstaller --onefile --name=tdwii_config_dump.exe  tdwii_plus_examples/cli/config_dump.py
        poetry run pyinstaller --onefile --windowed --name=eScheduler.exe  tdwii_plus_examples/rtbdi_creator/mainbdiwidget.py
        poetry run pyinstaller --onefile --windowed --name=ppvs_proxy.exe  tdwii_plus_examples/TDWII_PPVS_subscriber/ppvs_subscriber_widget.py
        poetry run pyinstaller --onefile  --name=eTMS.exe tdwii_plus_examples/cli/upsscp/upsscp.py
        cp rtbdi.toml dist/
        cp ppvs.toml dist/
        mkdir dist/config
        cp ./tdwii_plus_examples/config/ApplicationEntities.json dist/config/
        cp ./tdwii_plus_examples/config/MachineMap.json dist/config/
        cp ./tdwii_plus_examples/cli/upsscp/config/upsscp_default.ini dist/config


    # - name: Create distribution package (macOS/Linux)
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     mkdir dist-package
    #     if [ "${{ matrix.os }}" = "macos-latest" ]; then
    #       cp -r dist/tdwii_plus_examples.app dist-package/
    #       # Create a DMG file for easier distribution
    #       hdiutil create -volname tdwii_plus_examples -srcfolder dist-package -ov -format UDZO dist/tdwii_plus_examples.dmg
    #     elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
    #       cp -r dist/tdwii_plus_examples dist-package/
    #       # Create a tarball for Linux
    #       tar -czvf dist/tdwii_plus_examples-linux.tar.gz -C dist-package .
    #     fi
    #   shell: bash

    - name: Create distribution package (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path "dist/config" -DestinationPath "dist/config.zip" -Force
        Remove-Item -Path "dist/config" -Force
        Compress-Archive -Path "dist/" -DestinationPath "./twdii_plus_examples.zip" -Force
        Remove-Item -Path "dist/*.exe" -Force
        Remove-Item -Path "dist/*.toml" -Force
        Remove-Item -Path "dist/config.zip" -Force
        Copy-Item -Path "./twdii_plus_examples.zip" -DestinationPath "dist/" -Force

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: twdii_plus_examples.zip
        path: dist/twdii_plus_examples.zip

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: v${{ github.run_number }}
        name: Release ${{ github.run_number }}
        draft: true
        files: |
          dist/

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
